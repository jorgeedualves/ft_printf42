
/*

PRINTF = "print formatted"

A função:
pega a entrada (o que foi colocado na função) + argumentos opcionais se existirem
e produz uma sequência formatada de caracteres como output

a entrada pode conter zero ou mais diretivas:
 
    - zero diretivas --> simplesmente imprime o que foi fornecido
    Exemplo: printf("Hello World") --> output é: Hello World

    - outras diretivas: especificações de conversão que descrevem como formatar o que foi colocado na função
    especificações de conversão:
    % [flags] [width] [. precision] [size] type

Cada campo da especificação de conversão é um caractere ou um número que significa uma opção de formato particular 

O campo "type" é obrigatório e especifica o tipo de conversão a ser aplicado a um argumento - ex: para integer (%i) ou char (%c) 

Os campos opcionais "flags", "width", "precision", "size" controlam aspectos de formato adicionais, como espaços ou zeros à esquerda,
justificação e precisão exibida. 

Para esta tarefa:
"It will manage the following conversions: cspdiuxX%"
Temos que gerenciar as seguintes conversões:
    c - Character:      specifies a single-byte character (char)
    s - String:         specifies a single-byte or multi-byte character string; (char*)
    p - Pointer:    	Display the argument as an address in hexadecimal digits
    d - Integer:        Signed decimal integer
    i - Integer:    	Signed decimal integer
    u - Integer:    	Unsigned decimal integer
    x - Integer:    	Unsigned hexadecimal integer; uses "abcdef"
    X - Integer:    	Unsigned hexadecimal integer; uses "ABCDEF"
    %                   A '%' is written. No argument is converted. The complete conversion specification is '%%'.

Para esta tarefa:
"It will manage any combination of the following flags: ’-0.*’ and minimum fieldwidth with all conversions"                     
Temos que gerenciar os seguintes sinalizadores:
    - (alinhar)         Alinha o resultado à esquerda dentro da largura de campo fornecida. O padrão é alinhamento à direita.
    0 (preenchimento)   Quando a opção 'largura' é especificada, zeros precedem os tipos numéricos. O padrão adiciona espaços
                        Por exemplo, printf ("%4i", 3) produz:   3, enquanto printf ("%04i", 3) produz: 0003
                        Padrão: sem preenchimento.
    . (precisão)        Consiste em um ponto (.) seguido por um número inteiro decimal não negativo que, dependendo do tipo de conversão,
                        especifica o número de caracteres da string, o número de casas decimais ou o número de dígitos a serem impressos.
                        Ao contrário da especificação de largura, a especificação de precisão pode causar corte do valor de saída ou arredondamento 
                        do valor de um float.
                        Como os valores de precisão afetam os tipos da nossa tarefa:
                        c - Char: sem efeito
                        s - String: especifica o número máximo de caracteres a serem impressos. Os caracteres com excesso de precisão não são impressos. 
                            Padrão: os caracteres são impressos até que um caractere nulo seja encontrado.
                        p - Ponteiro: ? acho que não tem efeito sobre ponteiro
                        d, i, u, x, X - Inteiro: A precisão especifica o número mínimo de dígitos a serem impressos.
                                        Se o número de dígitos a serem impressos pela função for menor que a precisão,
                                        o valor de saída é preenchido à esquerda com zeros.
                                        O valor não é cortado quando o número de dígitos
                                        excede a precisão. Padrão: a precisão é 1
    * (asterisco)       Pode substituir especificações de sinalizadores
                        Por exemplo, printf("%*d", 5, 10) resultará na impressão de:     10, com uma largura total de 5 caracteres.
                        É a mesma coisa que escrever: printf("%5d", 10)
                        Por exemplo, printf("%.*s", 3, "abcdef") resultará na impressão de: abc.
                        É a mesma coisa que escrever: printf("%.3s", "abcdef");

*/

/*
Esse exemplo abaixo é de um protótipo que funciona, e como é mais simples, pode servir de base pra gente estudar.
Nessa função, o cara lida com a primeira parte da nossa tarefa: a conversão para char, decimal ou integer, string, etc

http://www.firmcodes.com/write-printf-function-c/

dá um  "gcc notas_printf.c" e depois executa pra dar uma olhada
*/


#include <stdio.h> 
#include <stdarg.h>						

char *convert(unsigned int num, int base) 					//Converte integer para octal, hex, etc.
{ 
	static char Representation[]= "0123456789ABCDEF";
	static char buffer[50]; 
	char *ptr; 
	
	ptr = &buffer[49]; 
	*ptr = '\0'; 
	
	do 
	{ 
		*--ptr = Representation[num%base]; 
		num /= base; 
	}while(num != 0); 
	
	return(ptr); 
}


void Myprintf(char* format,...) 						//printf function
{ 
	char *traverse; 
	unsigned int i; 
	char *s; 
	
	//Module 1: Initializing Myprintf's arguments 
	va_list arg; 
	va_start(arg, format); 
	
	for(traverse = format; *traverse != '\0'; traverse++)  //primeiro ele imprime tudo até o %, depois avança para depois da %
	{ 
		while( *traverse != '%' ) 
		{ 
			putchar(*traverse);
			traverse++; 
		} 

		traverse++; 
		
		//Module 2: Fetching and executing arguments -> aqui o cara lida com as formatações, alguns dos casos que a gente tem que lidar
		switch(*traverse) 
		{ 
			case 'c' : i = va_arg(arg,int);			//Fetch char argument
						putchar(i);
						break; 
						
			case 'd' : i = va_arg(arg,int); 		//Fetch Decimal/Integer argument
						if(i < 0) 
						{ 
							i = -i;
							putchar('-'); 
						} 
						puts(convert(i,10));
						break; 
						
			case 'o': i = va_arg(arg,unsigned int); //Fetch Octal representation
						puts(convert(i,8));
						break; 
						
			case 's': s = va_arg(arg,char *); 		//Fetch string
						puts(s); 
						break; 
						
			case 'x': i = va_arg(arg,unsigned int); //Fetch Hexadecimal representation
						puts(convert(i,16));
						break; 
		}	
	} 
	
	//Module 3: Closing argument list to necessary clean-up
	va_end(arg); 
} 


int main() 
{ 
	Myprintf(" WWW.FIRMCODES.COM \n %d", 9); 
	
	return 0;
} 


NAME = libftprintf.a

SRCS = ft_printf_utils.c ft_printf_utils_2.c ft_printf_utils_3.c ft_printf.c print_c.c print_id.c \
	   print_p.c print_s.c print_u.c print_xX.c

OBJECTS = $(subst .c,.o,$(SRCS))

all: $(NAME)

$(NAME): $(SRCS)
	@gcc -Wall -Wextra -Werror -c $(SRCS)
	@ar rc $(NAME) $(OBJECTS)
	@ranlib $(NAME)

clean:
	@/bin/rm -f $(OBJECTS) 

fclean: clean
	@/bin/rm -f $(NAME)

re: fclean all

.PHONY: clean fclean all re bonus



/*
//int len2;
	int len1, len2, len3, len4, len5, len6, len7, len8, len9;
	len1 = printf("%-1c", '0');
	len2 = printf(" %-2c ", '0');	//	0 + espaço
	len3 = printf(" %-3c", '0' - 256);
	len4 = printf("%-4c ", '0' + 256);
	len5 = printf(" %-1c %-2c %-3c ", '0', 0, '1');
	len6 = printf(" %-1c %-2c %-3c ", ' ', ' ', ' ');
	len7 = printf(" %-1c %-2c %-3c ", '1', '2', '3');
	len8 = printf(" %-1c %-2c %-3c ", '2', '1', 0);
	len9 = printf(" %-1c %-2c %-3c ", 0, '1', '2');
//	printf("  printf len %i", len2);
	printf("\n\nlen    printf: %i %i %i %i %i %i %i %i", len1, len2, len3, len4, len5, len6, len7, len8);
	printf("\n\n");
//int len22;	
	int len11, len22, len33, len44, len55, len66, len77, len88, len99;
	len11 = ft_printf("%-1c", '0');
	len22 = ft_printf(" %-2c ", '0');
	len33 = ft_printf(" %-3c", '0' - 256);
	len44 = ft_printf("%-4c ", '0' + 256);
	len55 = ft_printf(" %-1c %-2c %-3c ", '0', 0, '1');
	len66 = ft_printf(" %-1c %-2c %-3c ", ' ', ' ', ' ');
	len77 = ft_printf(" %-1c %-2c %-3c ", '1', '2', '3');
	len88 = ft_printf(" %-1c %-2c %-3c ", '2', '1', 0);
	len99 = printf(" %-1c %-2c %-3c ", 0, '1', '2');
	//printf("ft_printf len %i\n\n\n", len22);
	printf("\n\nlen ft_printf: %i %i %i %i %i %i %i %i\n\n\n\n\n\n\n", len11, len22, len33, len44, len55, len66, len77, len88);
*/

/*	int len1 = printf(" %-2c ", '0');
	printf("\nlen printf %i\n", len1);
	int len2 = printf(" %-3c \n", '0' - 256);
	printf("len prinf %i\n", len2);
	printf("\nft_printf: \n");
	int lena = ft_printf(" %-2c ", '0');
	printf("\nlen ft_printf %i\n", lena);
	int lenb = printf(" %-3c \n", '0' - 256);
	printf("len ft_printf %i\n", lenb);
*/
/*
	printf("--------------------2\n");
	printf(" %-s \n", "-");
	printf(" %-1s %-2s \n", "", "-");
	printf("\nft_printf: \n");
	ft_printf(" %-s \n", "-");
	ft_printf(" %-1s %-2s \n", "", "-");
	printf("--------------------3\n");
	printf(" %-4p \n", 17);
	printf(" %-9p %-10p \n", LONG_MIN, LONG_MAX);	
	printf("\nft_printf: \n");
	ft_printf(" %-4p \n", 17);
	ft_printf(" %-9p %-10p \n", LONG_MIN, LONG_MAX);	
	printf("--------------------4\n");
	printf(" %-1d \n", 99);
	printf(" %-2d \n", 100);
	printf(" %-3d \n", 101);
	printf(" %-1d \n", -9);
	printf("\nft_printf: \n");
	ft_printf(" %-1d \n", 99);
	ft_printf(" %-2d \n", 100);
	ft_printf(" %-3d \n", 101);
	ft_printf(" %-1d \n", -9);
	printf("--------------------5\n");
	printf(" %-3i \n", 101);
	printf(" %-1i \n", -9);
	printf("\nft_printf: \n");
	ft_printf(" %-3i \n", 101);
	ft_printf(" %-1i \n", -9);
	printf("--------------------6\n");
	printf(" %-11i \n", LONG_MAX);
	printf(" %-12i \n", LONG_MIN);
	printf("\nft_printf: \n");
	ft_printf(" %-11i \n", LONG_MAX);
	ft_printf(" %-12i \n", LONG_MIN);
	printf("--------------------7\n");
	printf(" %-3u \n", 101);
	printf(" %-1u \n", -9);
	printf("\nft_printf: \n");
	ft_printf(" %-3u \n", 101);
	ft_printf(" %-1u \n", -9);
*/
//    return (0);
//}

/*
	int len = ft_printf("%p\n", -1);
	ft_printf("\n%i", len);
    int len = ft_printf("%s", NULL);
    printf("\n%i\n", len); 
*/
/*	printf("casos precisão-size: imprime zeros + imprime string\n");	
	printf("%.5i---------------\n", 42);
	ft_printf("%.5i\n", 42);
*/
/*	ft_printf(" %p \n", -1);
	ft_printf(" %p \n", 1);
	ft_printf(" %p \n", 15);
	ft_printf(" %p \n", 16);
	ft_printf(" %p \n", 17);
ft_printf("Bla %.2ii bla %.5isbla bla %.ix bla %.i", 127, 42, 1023, 0);
*/
//Bla 127i bla 00042sbla bla 1023x bla % appinha

//Bla 127i bla 42sbla bla 3ff bla %      nosso  


//	return (0);
//}


/*
int main(void)
{
	printf(" %p \n", 1);
	printf(" %p \n", 15);
	ft_printf(" %p \n", 1);
	ft_printf(" %p \n", 15);
*/
/*
	ft_printf(" %p ", -1);  
	//printf("%s\n", );
    //ft_printf(NULL);
   //ft_printf("%s", NULL);
}
*/


/*
void print_sizes(int printf_len, int ft_printf_len)
{
    if (printf_len != ft_printf_len)
        printf("Diff KO: diferent sizes. Expected %i, but got %i\n", printf_len, ft_printf_len);
    else
        printf("Diff OK: equal sizes. Expected %i, got %i\n", printf_len, ft_printf_len);
}
*/

//int main (void)
//{

  //  ft_printf("%x", 0);
/*
    int printf_len = printf("%s\n", "Vila 26");
    int ft_printf_len = ft_printf("%s\n", "Vila 26");
    print_sizes(printf_len, ft_printf_len);
*/
/*	
	int len = printf("%s","Hello\n");
    printf("%i\n", len);
	int len1 = ft_printf("%s","Hello\n");
    ft_printf("%i\n", len1);
	int len2 = printf("%s","Hello Vila 26\n");
    printf("%i\n", len2);
	int len3 = ft_printf("%s", "Hello Vila 26\n");
    ft_printf("%i\n\n\n\n", len3);
*/	
/*	// TESTES DE x E X
	printf("----------TESTES DE x SEM FLAG - E SEM OPÇÃO 0--------\n");
	printf("%x\n", 123456789);
	ft_printf("%x\n", 123456789);
	printf("%15x\n", 123456789); 
	ft_printf("%15x\n", 123456789); //vai até 15 de width sem crashar <-------------------------
	printf("%3X\n", 123456789);
	ft_printf("%3X\n", 123456789);
	printf("%7X\n", 123456789);
	ft_printf("%7X\n", 123456789);
	printf("----------TESTES DE x COM FLAG - E SEM OPÇÃO 0--------\n");
	printf("%-x\n", 123456789);
	ft_printf("%-x\n", 123456789);
	printf("%-20x\n", 123456789);
	ft_printf("%-20x\n", 123456789);
	printf("%-3x\n", 123456789);
	ft_printf("%-3x\n", 123456789);
	printf("%7x\n", 123456789);
	ft_printf("%7x\n", 123456789);
	printf("----------TESTES DE x SEM FLAG - E COM  OPÇÃO 0--------\n");
	printf("%0x\n", 123456789);
	ft_printf("%0x\n", 123456789);
	printf("%015x\n", 123456789);
	ft_printf("%015x\n", 123456789);
	printf("%03x\n", 123456789);
	ft_printf("%03x\n", 123456789);
	printf("%07x\n", 123456789);
	ft_printf("%07x\n", 123456789);
*/
/*	printf("----------TESTES DE x COM FLAG - E COM OPÇÃO 0--------\n");
	printf("%-0x\n", 123456789);
	ft_printf("%-0x\n", 123456789);
	printf("%-015x\n", 123456789);
	ft_printf("%-015x\n", 123456789);
	printf("%-03x\n", 123456789);
	ft_printf("%-03x\n", 123456789);
	printf("%-07x\n", 123456789);
	ft_printf("%-07x\n", 123456789);
*/
/*	// TESTES DE PONTEIRO
	char    *string = "Hello";
	printf("----------TESTES DE PONTEIRO SEM FLAG - E SEM OPÇÃO 0--------\n");
    printf("%p\n", &string);
   	ft_printf("%p\n", &string);
    printf("%20p\n", &string);
   	ft_printf("%20p\n", &string);
    printf("%3p\n", &string);
   	ft_printf("%3p\n", &string);
    printf("%14p\n", &string);
   	ft_printf("%14p\n", &string);
	printf("----------TESTES DE PONTEIRO COM FLAG - E SEM OPÇÃO 0--------\n");
    printf("%-p\n", &string);
   	ft_printf("%-p\n", &string);
    printf("%-20p\n", &string);
   	ft_printf("%-20p\n", &string);
    printf("%-3p\n", &string);
   	ft_printf("%-3p\n", &string);
    printf("%-14p\n", &string);
   	ft_printf("%-14p\n", &string);
*/
/*
	printf("----------TESTES DE PONTEIRO SEM FLAG - E COM OPÇÃO 0--------\n");
	printf("%0p\n", &string);
   	ft_printf("%0p\n", &string);
	printf("%020p\n", &string);
   	ft_printf("%020p\n", &string);
	printf("%03p\n", &string);
   	ft_printf("%03p\n", &string);
	printf("%014p\n", &string);
   	ft_printf("%014p\n", &string);
	printf("----------TESTES DE PONTEIRO COM FLAG - E COM OPÇÃO 0--------\n");
	printf("%-0p\n", &string);
   	ft_printf("%-0p\n", &string);
	printf("%-020p\n", &string);
   	ft_printf("%-020p\n", &string);
	printf("%-03p\n", &string);
   	ft_printf("%-03p\n", &string);
	printf("%-014p\n", &string);
   	ft_printf("%-014p\n", &string);
*/


	//TESTES DE UNSIGNED INT
/*
	printf("TESTES PARA FLAG ZERO COM O ZERO ANTES DO WIDTH\n");
	printf("%u\n", 123456789);
	ft_printf("%u\n", 123456789);
	printf("%0u\n", 123456789);
	ft_printf("%0u\n", 123456789);
	printf("%0.3u\n", 123456789);
	ft_printf("%0.3u\n", 123456789);
	printf("%0.9u\n", 123456789);
	ft_printf("%0.9u\n", 123456789);
	printf("%0.14u\n", 123456789);
	ft_printf("%0.14u\n", 123456789);
	printf("%014u\n", 123456789);
	ft_printf("%014u\n", 123456789);
	printf("%014.3u\n", 123456789);
	ft_printf("%014.3u\n", 123456789);
	printf("%014.9u\n", 123456789);
	ft_printf("%014.9u\n", 123456789);
	printf("%014.14u\n", 123456789);
	ft_printf("%014.14u\n", 123456789);
	printf("%09u\n", 123456789);
	ft_printf("%09u\n", 123456789);
	printf("%09.3u\n", 123456789);
	ft_printf("%09.3u\n", 123456789);
	printf("%09.9u\n", 123456789);
	ft_printf("%09.9u\n", 123456789);
	printf("%09.14u\n", 123456789);
	ft_printf("%09.14u\n", 123456789);
 
	printf(".............................................\n\n\n\n");
	printf("TESTES PARA FLAG ZERO SEM O ZERO ANTES DO WIDTH\n");
	printf("%u\n", 123456789);
	ft_printf("%u\n", 123456789);
	printf("%.3u\n", 123456789);
	ft_printf("%.3u\n", 123456789);
	printf("%.9u\n", 123456789);
	ft_printf("%.9u\n", 123456789);
	printf("%.14u\n", 123456789);
	ft_printf("%.14u\n", 123456789);
	printf("%14u\n", 123456789);
	ft_printf("%14u\n", 123456789);
	printf("%14.3u\n", 123456789);
	ft_printf("%14.3u\n", 123456789);
	printf("%14.9u\n", 123456789);
	ft_printf("%14.9u\n", 123456789);
	printf("%14.14u\n", 123456789);
	ft_printf("%14.14u\n", 123456789);
	printf("%9u\n", 123456789);
	ft_printf("%9u\n", 123456789);
	printf("%9.3u\n", 123456789);
	ft_printf("%9.3u\n", 123456789);
	printf("%9.9u\n", 123456789);
	ft_printf("%9.9u\n", 123456789);
	printf("%9.14u\n", 123456789);
	ft_printf("%9.14u\n", 123456789);
*/
/*
	printf("TESTES PARA FLAG - COM O ZERO ANTES DO WIDTH\n");
	printf("%-u\n", 123456789);
	ft_printf("%-u\n", 123456789);
	printf("%-0u\n", 123456789);
	ft_printf("%-0u\n", 123456789);
	printf("%-0.3u\n", 123456789);
	ft_printf("%-0.3u\n", 123456789);
	printf("%-0.9u\n", 123456789);
	ft_printf("%-0.9u\n", 123456789);
	printf("%-0.14u\n", 123456789);
	ft_printf("%-0.14u\n", 123456789);
	printf("%-014u\n", 123456789);
	ft_printf("%-014u\n", 123456789);
	printf("%-014.3u\n", 123456789);
	ft_printf("%-014.3u\n", 123456789);
	printf("%-014.9u\n", 123456789);
	ft_printf("%-014.9u\n", 123456789);
	printf("%-014.14u\n", 123456789);
	ft_printf("%-014.14u\n", 123456789);
	printf("%-09u\n", 123456789);
	ft_printf("%-09u\n", 123456789);
	printf("%-09.3u\n", 123456789);
	ft_printf("%-09.3u\n", 123456789);
	printf("%-09.9u\n", 123456789);
	ft_printf("%-09.9u\n", 123456789);
	printf("%-09.14u\n", 123456789);
	ft_printf("%-09.14u\n", 123456789);
*/

/*	printf(".............................................\n\n\n\n");
	printf("TESTES PARA FLAG - SEM O ZERO ANTES DO WIDTH\n");
	printf("%-u\n", 123456789);
	ft_printf("%-u\n", 123456789);
	printf("%-.3u\n", 123456789);
	ft_printf("%-.3u\n", 123456789);
	printf("%-.9u\n", 123456789);
	ft_printf("%-.9u\n", 123456789);
	printf("%-.14u\n", 123456789);
	ft_printf("%-.14u\n", 123456789);
	printf("%-14u\n", 123456789);
	ft_printf("%-14u\n", 123456789);
	printf("%-14.3u\n", 123456789);
	ft_printf("%-14.3u\n", 123456789);
	printf("%-14.9u\n", 123456789);
	ft_printf("%-14.9u\n", 123456789);
	printf("%-14.14u\n", 123456789);
	ft_printf("%-14.14u\n", 123456789);
	printf("%-9u\n", 123456789);
	ft_printf("%-9u\n", 123456789);
	printf("%-9.3u\n", 123456789);
	ft_printf("%-9.3u\n", 123456789);
	printf("%-9.9u\n", 123456789);
	ft_printf("%-9.9u\n", 123456789);
	printf("%-9.14u\n", 123456789);
	ft_printf("%-9.14u\n", 123456789);
*/


	// TESTES DE INT E D

	// TESTES SEM FLAG - //
/*	printf("CASOS COM ZERO ANTES DO WIDTH E SEM FLAG '-'\n");
	printf("CASOS COM ZERO ANTES DO WIDTH E SEM FLAG '-'\n");
	//1
	printf("casos de impressão normal:\n");
	printf("%0i\n", 123456);
	ft_printf("%0i\n", 123456);
	printf("%0.3i\n", 123456);
	ft_printf("%0.3i\n", 123456);
	printf("%0.6i\n", 123456);
	ft_printf("%0.6i\n", 123456);
	printf("%3i\n", 123456);
	ft_printf("%3i\n", 123456);
	printf("%03.3i\n", 123456);
	ft_printf("%03.3i\n", 123456);
	printf("%03.6i\n", 123456);
	ft_printf("%03.6i\n", 123456);
	printf("%06i\n", 123456);
	ft_printf("%06i\n", 123456);
	printf("%06.3i\n", 123456);
	ft_printf("%06.3i\n", 123456);
	printf("%06.6i\n", 123456);
	ft_printf("%06.6i\n", 123456);
	
	//2
	printf("casos precisão-size: imprime zeros + imprime string\n");
	printf("%0.10i\n", 123456);
	ft_printf("%0.10i\n", 123456);
	printf("%03.10i\n", 123456);
	ft_printf("%03.10i\n", 123456);
	printf("%03.10i\n", 123456);
	ft_printf("%03.10i\n", 123456);
	printf("%06.10i\n", 123456);
	ft_printf("%06.10i\n", 123456);
	
	//3
	printf("casos precisão-size: imprime espaços + imprime string\n");
	printf("%010.3i\n", 123456); 
	ft_printf("%010.3i\n", 123456);
	printf("%010.6i\n", 123456);
	ft_printf("%010.6i\n", 123456);
	
	printf("CASOS SEM O ZERO ANTES DO WIDTH E SEM FLAG '-'\n");
	//1
	printf("casos de impressão normal:\n");
	printf("%i\n", 123456);
	ft_printf("%i\n", 123456);
	printf("%.3i\n", 123456);
	ft_printf("%.3i\n", 123456);
	printf("%.6i\n", 123456);
	ft_printf("%.6i\n", 123456);
	printf("%3i\n", 123456);
	ft_printf("%3i\n", 123456);
	printf("%3.3i\n", 123456);
	ft_printf("%3.3i\n", 123456);
	printf("%3.6i\n", 123456);
	ft_printf("%3.6i\n", 123456);
	printf("%6i\n", 123456);
	ft_printf("%6i\n", 123456);
	printf("%6.3i\n", 123456);
	ft_printf("%6.3i\n", 123456);
	printf("%6.6i\n", 123456);
	ft_printf("%6.6i\n", 123456);
	
	//2
	printf("casos precisão-size: imprime zeros + imprime string\n");	
	printf("%.10i\n", 123456);
	ft_printf("%.10i\n", 123456);
	printf("%3.10i\n", 123456);
	ft_printf("%3.10i\n", 123456);
	printf("%3.10i\n", 123456);
	ft_printf("%3.10i\n", 123456);
	printf("%6.10i\n", 123456);
	ft_printf("%6.10i\n", 123456);
	
	//3
	printf("casos precisão-size: imprime espaços + imprime string\n");
	printf("%10.3i\n", 123456); 
	ft_printf("%10.3i\n", 123456);
	printf("%10.6i\n", 123456);
	ft_printf("%10.6i\n", 123456);
*/
//////////

/*
	// TESTES COM FLAG - //
	printf("CASOS COM ZERO ANTES DO WIDTH E COM FLAG '-'\n");
	printf("CASOS COM ZERO ANTES DO WIDTH E COM FLAG '-'\n");
	printf("CASOS COM ZERO ANTES DO WIDTH E COM FLAG '-'\n");
	//1
	printf("casos de impressão normal:\n");
	printf("%-0i\n", 123456);
	ft_printf("%-0i\n", 123456);
	printf("%-0.3i\n", 123456);
	ft_printf("%-0.3i\n", 123456);
	printf("%-0.6i\n", 123456);
	ft_printf("%-0.6i\n", 123456);
	printf("%-3i\n", 123456);
	ft_printf("%-3i\n", 123456);
	printf("%-03.3i\n", 123456);
	ft_printf("%-03.3i\n", 123456);
	printf("%-03.6i\n", 123456);
	ft_printf("%-03.6i\n", 123456);
	printf("%-06i\n", 123456);
	ft_printf("%-06i\n", 123456);
	printf("%-06.3i\n", 123456);
	ft_printf("%-06.3i\n", 123456);
	printf("%-06.6i\n", 123456);
	ft_printf("%-06.6i\n", 123456);
	
	//2
	printf("casos precisão-size: imprime zeros + imprime string\n");
	printf("%-0.10i\n", 123456);
	ft_printf("%-0.10i\n", 123456);
	printf("%-03.10i\n", 123456);
	ft_printf("%-03.10i\n", 123456);
	printf("%-03.10i\n", 123456);
	ft_printf("%-03.10i\n", 123456);
	printf("%-06.10i\n", 123456);
	ft_printf("%-06.10i\n", 123456);
	
	//3
	printf("casos precisão-size: imprime espaços + imprime string\n");
	printf("%-010.3i\n", 123456); 
	ft_printf("%-010.3i\n", 123456);
	printf("%-010.6i\n", 123456);
	ft_printf("%-010.6i\n", 123456);
*/	
/*
	printf("CASOS SEM O ZERO ANTES DO WIDTH E COM FLAG '-'\n");
	//1
	printf("casos de impressão normal:\n");
	printf("%-i\n", 123456);
	ft_printf("%-i\n", 123456);
	printf("%-.3i\n", 123456);
	ft_printf("%-.3i\n", 123456);
	printf("%-.6i\n", 123456);
	ft_printf("%-.6i\n", 123456);
	printf("%-3i\n", 123456);
	ft_printf("%-3i\n", 123456);
	printf("%-3.3i\n", 123456);
	ft_printf("%-3.3i\n", 123456);
	printf("%-3.6i\n", 123456);
	ft_printf("%-3.6i\n", 123456);
	printf("%-6i\n", 123456);
	ft_printf("%-6i\n", 123456);
	printf("%-6.3i\n", 123456);
	ft_printf("%-6.3i\n", 123456);
	printf("%-6.6i\n", 123456);
	ft_printf("%-6.6i\n", 123456);
	
	//2
	printf("casos precisão-size: imprime zeros + imprime string\n");	
	printf("%-.10i\n", 123456);
	ft_printf("%-.10i\n", 123456);
	printf("%-3.10i\n", 123456);
	ft_printf("%-3.10i\n", 123456);
	printf("%-3.10i\n", 123456);
	ft_printf("%-3.10i\n", 123456);
	printf("%-6.10i\n", 123456);
	ft_printf("%-6.10i\n", 123456);
	
	//3
	printf("casos precisão-size: imprime espaços + imprime string\n");
	printf("%-10.3i\n", 123456); 
	ft_printf("%-10.3i\n", 123456);
	printf("%-10.6i\n", 123456);
	ft_printf("%-10.6i\n", 123456);
*/	

	
	//TESTES DE STRING
/*	printf("\nimpressão sem flags:\n\n");
	int len;
	len = printf("Vila 26");
	printf("printf len: %i\n", len);
	
	len = 0;
	len = ft_printf("Vila 26");
	ft_printf("ft_printf len: %i\n", len);
*/
/*
	printf("\nsem a flag '-':\n\n");
	printf("%s\n", "Vila 26");
	ft_printf("%s\n", "Vila 26");
	printf("%10s\n", "Vila 26");
	ft_printf("%10s\n", "Vila 26");
	printf("%.4s\n", "Vila 26");
	ft_printf("%.4s\n", "Vila 26");
	printf("%10.4s\n", "Vila 26");
	ft_printf("%10.4s\n", "Vila 26");
	printf("%4.10s\n", "Vila 26");
	ft_printf("%4.10s\n", "Vila 26");
	printf("\ncom a flag '-':\n\n");
	
	printf("%-10s\n", "Vila 26");
	ft_printf("%-10s\n", "Vila 26");
	printf("%-.4s\n", "Vila 26");
	ft_printf("%-.4s\n", "Vila 26");
	printf("%-10.4s\n", "Vila 26");
	ft_printf("%-10.4s\n", "Vila 26");
	printf("%-4.10s\n", "Vila 26");
	ft_printf("%-4.10s\n", "Vila 26");
*/
/*	
	//TESTES DE CHAR
	printf("\n   caso 1 printf: %c\n", 'C');
	ft_printf("caso 1 ft_printf: %c\n", 'C');
	printf("\n   caso2  printf: %10c\n", 'C');
	ft_printf("caso 2 ft_printf: %10c\n", 'C');
	printf("\n   caso 3 printf: %-10c\n", 'C');
	ft_printf("caso 3 ft_printf: %-10c\n", 'C');
*/	

testes:
/*   
	char c = 'u';
	char *s = "Vila 26 bombando";
    int in = 42;
    int dec = 42;
    unsigned int ui = -3000;
    int hexa = 300000000;
    printf("\n   printf -> char: %c, string: %s, int: %i, decimal: %d, unsigned: %u\n", c, s, in, dec, ui);
    ft_printf("ft_printf -> char: %c, string: %s, int: %i, decimal: %d, unsigned: %u\n\n", c, s, in, dec, ui);
    printf("\n   printf -> pointer: %p, hexa 'x': %x, hexa 'X': %X,  %%\n", &s, hexa, hexa);
    ft_printf("ft_printf -> pointer: %p, hexa 'x': %x, hexa 'X': %X,  %%\n\n", &s, hexa, hexa);
*/	